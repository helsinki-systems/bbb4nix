diff --git a/bbb-common-web/src/main/java/org/bigbluebutton/presentation/imp/OfficeToPdfConversionService.java b/bbb-common-web/src/main/java/org/bigbluebutton/presentation/imp/OfficeToPdfConversionService.java
index fb24ce2b2b..f7bbe5c276 100755
--- a/bbb-common-web/src/main/java/org/bigbluebutton/presentation/imp/OfficeToPdfConversionService.java
+++ b/bbb-common-web/src/main/java/org/bigbluebutton/presentation/imp/OfficeToPdfConversionService.java
@@ -44,6 +44,9 @@ public class OfficeToPdfConversionService {
   private final ArrayList<ExternalOfficeManager> officeManagers;
   private ExternalOfficeManager currentManager = null;
   private boolean skipOfficePrecheck = false;
+  private int sofficePortBase = 8201;
+  private int sofficeManagers = 4;
+  private String sofficeWorkingDirBase = "/var/tmp/soffice_";
 
   public OfficeToPdfConversionService() throws OfficeException {
     officeManagers = new ArrayList<>();
@@ -163,17 +166,31 @@ public class OfficeToPdfConversionService {
     this.skipOfficePrecheck = skipOfficePrecheck;
   }
 
+  public void setSofficePortBase(int sofficePortBase) {
+    this.sofficePortBase = sofficePortBase;
+  }
+
+  public void setSofficeManagers(int sofficeServiceManagers) {
+    this.sofficeManagers = sofficeServiceManagers;
+  }
+
+  public void setSofficeWorkingDirBase(String sofficeWorkingDirBase) {
+    this.sofficeWorkingDirBase = sofficeWorkingDirBase;
+  }
+
   public void start() {
-    for(int managerIndex = 0; managerIndex < 4; managerIndex ++) {
+    log.info("Starting LibreOffice pool with " + sofficeManagers + " managers, starting from port " + sofficePortBase);
+
+    for(int managerIndex = 0; managerIndex < sofficeManagers; managerIndex ++) {
       Integer instanceNumber = managerIndex + 1; // starts at 1
 
       try {
-        final File workingDir = new File("/var/tmp/soffice_0" +instanceNumber);
+        final File workingDir = new File(sofficeWorkingDirBase + String.format("%02d", instanceNumber));
         ExternalOfficeManager officeManager = ExternalOfficeManager
                 .builder()
                 .connectTimeout(2000L)
                 .retryInterval(500L)
-                .portNumber(8200 + instanceNumber)
+                .portNumber(sofficePortBase + managerIndex)
                 .connectOnStart(false) // If it's true and soffice is not available, exception is thrown here ( we don't want exception here - we want the manager alive trying to reconnect )
                 .workingDir(workingDir)
                 .build();
@@ -190,8 +207,12 @@ public class OfficeToPdfConversionService {
         log.error("Could not start Office Manager " + instanceNumber + ". Details: " + e.getMessage());
       }
 
-      currentManager = officeManagers.get(0);
     }
+    if (officeManagers.size() == 0) {
+      log.error("No office managers could be started");
+      return;
+    }
+    currentManager = officeManagers.get(0);
   }
 
   public void stop() {
diff --git a/bigbluebutton-web/grails-app/conf/bigbluebutton.properties b/bigbluebutton-web/grails-app/conf/bigbluebutton.properties
index c613665c42..e845cb93e5 100755
--- a/bigbluebutton-web/grails-app/conf/bigbluebutton.properties
+++ b/bigbluebutton-web/grails-app/conf/bigbluebutton.properties
@@ -48,6 +48,21 @@ presCheckExec=/usr/share/prescheck/prescheck.sh
 # Office doc to PDF right away.
 skipOfficePrecheck=true
 
+#----------------------------------------------------
+# Number of soffice processes that are running on this machine
+sofficeManagers=4
+
+#----------------------------------------------------
+# Port number of the first soffice process
+sofficePortBase=8201
+
+#----------------------------------------------------
+# Working directory prefix for each soffice process.
+# The value of this is appended with the number of the
+# soffice process (starting at 1), padded to two digits
+# (e.g. /var/tmp/soffice_01 for the first process).
+sofficeWorkingDirBase=/var/tmp/soffice_
+
 #----------------------------------------------------
 # These will be copied in cases where the conversion process
 # fails to generate a slide from the uploaded presentation
diff --git a/bigbluebutton-web/grails-app/conf/spring/doc-conversion.xml b/bigbluebutton-web/grails-app/conf/spring/doc-conversion.xml
index 6658ebc5ef..deccd608dc 100755
--- a/bigbluebutton-web/grails-app/conf/spring/doc-conversion.xml
+++ b/bigbluebutton-web/grails-app/conf/spring/doc-conversion.xml
@@ -39,6 +39,9 @@ with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.
           init-method="start" destroy-method="stop">
         <property name="officeDocumentValidator" ref="officeDocumentValidator"/>
         <property name="skipOfficePrecheck" value="${skipOfficePrecheck}"/>
+        <property name="sofficePortBase" value="${sofficePortBase}"/>
+        <property name="sofficeManagers" value="${sofficeManagers}"/>
+        <property name="sofficeWorkingDirBase" value="${sofficeWorkingDirBase}"/>
     </bean>
 
     <bean id="pageExtractor" class="org.bigbluebutton.presentation.imp.PageExtractorImp"/>
